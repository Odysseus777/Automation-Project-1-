beforeEach(() => {
    cy.visit('cypress/fixtures/registration_form_2.html')
})
/*
Assignment 4: add content to the following tests
*/
describe('Section 1: Functional tests, Mirando Kersman', () => {
    it('User can use only same both first and validation passwords', () => {
        cy.get('.input[placeholder="John01"]').type('Something')
        cy.get('form label[for="email"]').type('email@email.com')
        cy.get('[data-cy="name"]').type('Mirando')
        cy.get('#lastName').type('Kersman')
        cy.get('[data-testid="phoneNumberTestId"]').type('555666777')
        cy.get('#password').type('SecurePWD')
        cy.get('#confirm').type('unSecurePWD')
        cy.get('h2').contains('Password').click()
        cy.get('.submit_button').should('not.be.enabled')
        cy.get('#password_error_message').should('be.visible').should('contain', 'Passwords do not match!')
        // Test turnaround to matching passwords:
        cy.get('#confirm').clear().type('SecurePWD')
        cy.get('h2').contains('Password').click()
        cy.get('#password_error_message').should('not.be.visible')
        cy.get('.submit_button').should('be.enabled')
    })
    it('User can submit form with all fields added', () => {
        cy.get('#username').type('Something')
        cy.get('.input[type="email"]').type('email@email.com')
        cy.get('[name="name"]').type('Mirando')
        cy.get('#lastName').type('Kersman')
        cy.get('[data-testid="phoneNumberTestId"]').type('555666777')
        cy.get('[value="php"]').click()
        cy.get('#vehicle2').click()
        cy.get('#cars').select('audi')
        cy.get('#animal').select('hippo')
        cy.get('#password').type('SecurePWD')
        cy.get('#confirm').type('SecurePWD')
        cy.get('h2').contains('Password').click()
        cy.get('.submit_button').should('be.enabled').click()
        cy.get('#success_message').should('be.visible').should('contain', "User successfully submitted registration")
    })
    it('User can submit form with valid data and only mandatory fields added', () => {
        inputValidData('Username777')
        cy.get('.submit_button').should('be.enabled').click()
        cy.get('#success_message').should('be.visible').should('contain', "User successfully submitted registration")
    })
    it('User can not submit form with mandatory field email missing', () => {
        inputValidData('Username777')
        cy.get('#email').clear()
        cy.get('h2').contains('Password').click()
        cy.get('.submit_button').should('not.be.enabled')
        cy.get('#success_message').should('not.be.visible')
        cy.get('#input_error_message').should('be.visible').should('contain', 'Mandatory input field is not valid or empty!')
    })
    it('User can not submit form with mandatory field Last name missing', () => {
        inputValidData('Username777')
        cy.get('[name="lastName"]').clear()
        cy.get('h2').contains('Password').click()
        cy.get('.submit_button').should('not.be.enabled')
        cy.get('#success_message').should('not.be.visible')
        cy.get('#input_error_message').should('be.visible').should('contain', 'Mandatory input field is not valid or empty!')
    })
})
/*
Assignment 5: create more visual tests
*/
describe('Section 2: Visual tests, Mirando Kersman', () => {
    it('Check that Cerebrum Hub logo is correct and has correct size', () => {
        cy.log('Will check logo source and size')
        cy.get('img').eq('0').should('have.attr', 'src').should('include', 'cerebrum_hub_logo')
        cy.get('img').eq('0').invoke('height').should('be.lessThan', 178)
            .and('be.greaterThan', 100)
        cy.get('img').eq('0').invoke('width').should('be.lessThan', 179)
            .and('be.greaterThan', 100)
    })
    it('Check that Cypress logo is correct and has correct size', () => {
        cy.log('Will check logo source and size')
        cy.get('img').eq('1').should('have.attr', 'src').should('include', 'cypress_logo')
        cy.get('img').eq('1').invoke('height').should('be.lessThan', 116)
            .and('be.greaterThan', 80)
        cy.get('img').eq('1').invoke('width').should('be.lessThan', 117)
            .and('be.greaterThan', 80)
    })
    it('Check navigation part, Registration form 1', () => {
        cy.get('nav').children().should('have.length', 2)
        cy.get('nav').siblings('h1').should('have.text', 'Registration form number 2')
        cy.get('nav').children().eq(0).should('be.visible')
            .and('have.attr', 'href', 'registration_form_1.html')
            .click()
        cy.url().should('contain', '/registration_form_1.html')
        cy.go('back')
        cy.log('Back again in registration form 2')
    })
    it('Check navigation part, Registration form 3', () => {
        cy.get('nav').children().should('have.length', 2)
        cy.get('nav').siblings('h1').should('have.text', 'Registration form number 2')
        cy.get('nav').children().eq(1).should('be.visible')
            .and('have.attr', 'href', 'registration_form_3.html')
            .click()
        cy.url().should('contain', '/registration_form_3.html')
        cy.go('back')
        cy.log('Back again in registration form 2')
    })
    it('Check that radio button list is correct', () => {
        cy.get('input[type="radio"]').should('have.length', 4)
        // Verify labels
        cy.get('input[type="radio"]').next().eq(0).should('have.text', 'HTML')
        cy.get('input[type="radio"]').next().eq(1).should('have.text', 'CSS')
        cy.get('input[type="radio"]').next().eq(2).should('have.text', 'JavaScript')
        cy.get('input[type="radio"]').next().eq(3).should('have.text', 'PHP')
        //Verify default state
        cy.get('input[type="radio"]').eq(0).should('not.be.checked')
        cy.get('input[type="radio"]').eq(1).should('not.be.checked')
        cy.get('input[type="radio"]').eq(2).should('not.be.checked')
        cy.get('input[type="radio"]').eq(3).should('not.be.checked')
        // Verify selecting one radio button will remove selection from the other 
        cy.get('input[type="radio"]').eq(0).check().should('be.checked')
        cy.get('input[type="radio"]').eq(1).check().should('be.checked')
        cy.get('input[type="radio"]').eq(0).should('not.be.checked')
    })
    it('Check that list of checkboxes is correct and behaves as expected', () => {
        cy.get('input[type="checkbox"]').should('have.length', 3)
        // Verify labels
        cy.get('input[type="checkbox"]').next().eq(0).should('have.text', 'I have a bike')
        cy.get('input[type="checkbox"]').next().eq(1).should('have.text', 'I have a car')
        cy.get('input[type="checkbox"]').next().eq(2).should('have.text', 'I have a boat')
        //Verify default state
        cy.get('input[type="checkbox"]').eq(0).should('not.be.checked')
        cy.get('input[type="checkbox"]').eq(1).should('not.be.checked')
        cy.get('input[type="checkbox"]').eq(2).should('not.be.checked')
        // Verify selecting/deselecting one checkbox will not affect others
        cy.get('input[type="checkbox"]').eq(0).check()
        cy.get('input[type="checkbox"]').eq(1).check()
        cy.get('input[type="checkbox"]').eq(2).check()
        cy.get('input[type="checkbox"]').should('be.checked')
        cy.get('input[type="checkbox"]').eq(0).uncheck().should('not.be.checked')
        cy.get('input[type="checkbox"]').eq(1).uncheck().should('not.be.checked')
        cy.get('input[type="checkbox"]').eq(2).uncheck().should('not.be.checked')
    })
    it('Car dropdown is correct', () => {
        cy.get('#cars').select(1).screenshot('Cars drop-down')
        cy.screenshot('Full page screenshot')
        cy.get('#cars').children().should('have.length', 4)
        cy.get('#cars').find('option').should('have.length', 4)
        cy.get('#cars').find('option').then(options => {
            const actual = [...options].map(option => option.value)
            expect(actual).to.deep.eq(['volvo', 'saab', 'opel', 'audi'])
        })
    })
    it('Animal dropdown is correct', () => {
        cy.get('#animal').children().should('have.length', 6)
        cy.get('#animal').find('option').eq(0).should('have.text', 'Dog')
        cy.get('#animal').find('option').eq(1).should('have.text', 'Cat')
        cy.get('#animal').find('option').eq(2).should('have.text', 'Snake')
        cy.get('#animal').find('option').eq(3).should('have.text', 'Hippo')
        cy.get('#animal').find('option').eq(4).should('have.text', 'Cow')
        cy.get('#animal').find('option').eq(5).should('have.text', 'Horse')
    })
})
function inputValidData(Username777) {
    cy.log('Username will be filled')
    cy.get('input[data-testid="user"]').type('Username777')
    cy.get('#email').type('yesitis@validemail.com')
    cy.get('[data-cy="name"]').type('Mirando')
    cy.get('#lastName').type('Kersman')
    cy.get('[data-testid="phoneNumberTestId"]').type('555666777')
    cy.get('#password').type('SecurePWD')
    cy.get('#confirm').type('SecurePWD')
    cy.get('h2').contains('Password').click()
}